{"version":3,"sources":["Config.ts","Utils.ts","components/Header.tsx","components/Graph.tsx","components/KPIs.tsx","components/App.tsx","serviceWorker.ts","index.tsx","logo.svg","logoText.svg"],"names":["Config","Object","classCallCheck","this","componentsMainColor","apiKey","getApiUrl","startDate","endDate","stockSymbol","concat","Utils","getDateString","date","getFullYear","getMonth","getDate","Header","state","loaderRef","React","createRef","handleSubmitForm","e","preventDefault","_this","startLoader","props","onRequestData","current","style","animationPlayState","checkLoader","loading","_this2","react_default","a","createElement","className","src","logo","ref","onAnimationIteration","alt","logoText","onSubmit","type","value","onChange","setState","target","placeholder","disabled","PureComponent","Graph","datasetNameShortened","datasetName","split","trim","graphWidth","document","documentElement","clientWidth","graphHeight","clientHeight","react_plotly_default","data","x","dateValues","y","stockValues","mode","marker","color","layout","width","height","margin","l","r","b","t","pad","title","font","family","size","memo","maxDrawdown","simpleReturn","length","PortfolioAnalytics","cumulativeReturn","toFixed","App","fetchApiData","today","Date","todayDateString","url","fetch","then","response","json","saveApiData","catch","error","handleError","message","apiData","dataset","column_names","quandl_error","NotificationManager","undefined","parseValuesFromApiData","memoize","adjCloseValues","dateIndex","indexOf","adjCloseIndex","map","arrayOfData","reverse","updateWindowDimensions","forceUpdate","window","addEventListener","removeEventListener","_this$parseValuesFrom","Header_Header","components_Graph","name","components_KPIs","lib","Component","Boolean","location","hostname","match","ReactDOM","render","components_App","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.035eede1.chunk.js","sourcesContent":["export class Config {\r\n    static componentsMainColor = \"#0e6789\";\r\n    static apiKey = \"oyRsQA1Vvx-srk25KuXg\";\r\n    static getApiUrl = (startDate?: string, endDate?: string, stockSymbol?: string) => \r\n    `https://www.quandl.com/api/v3/datasets/EOD/${stockSymbol}?start_date=${startDate}&end_date=${endDate}&api_key=${Config.apiKey}`;\r\n}\r\n","export class Utils {\r\n    static getDateString = (date: Date) => `${date.getFullYear()}-${date.getMonth()+1}-${date.getDate()}`;\r\n}\r\n","import React from 'react';\r\nimport logo from '../logo.svg';\r\nimport logoText from '../logoText.svg';\r\nimport '../styles/Header.css';\r\n\r\nexport interface IHeaderProps {\r\n    onRequestData: (stockSymbol: string, startDate: string) => void;\r\n    loading?: boolean;\r\n}\r\n\r\ninterface IHeaderState {\r\n    stockSymbol: string;\r\n    startDate: string;\r\n}\r\n\r\nexport default class Header extends React.PureComponent<IHeaderProps, IHeaderState> {\r\n    state: IHeaderState = {\r\n        stockSymbol: \"HD\",\r\n        startDate: \"2016-01-01\"        \r\n    };\r\n\r\n    loaderRef = React.createRef<HTMLImageElement>();\r\n\r\n    handleSubmitForm = (e: React.FormEvent) => {\r\n        e.preventDefault();    \r\n        this.startLoader();    \r\n        this.props.onRequestData(this.state.stockSymbol, this.state.startDate);\r\n      }\r\n\r\n    startLoader = () => {\r\n        if (this.loaderRef.current) {\r\n            this.loaderRef.current.style.animationPlayState = \"running\";\r\n        }\r\n    } \r\n    \r\n    checkLoader = () => {\r\n        if (this.loaderRef.current) {\r\n            this.loaderRef.current.style.animationPlayState = this.props.loading ? \"running\" : \"paused\";\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header className=\"header\">\r\n                <div className=\"header__title\">\r\n                    <img src={logo} className=\"title__logo\" ref={this.loaderRef} onAnimationIteration={this.checkLoader} alt=\"logo\" />\r\n                    <img src={logoText} alt=\"logoText\" />\r\n                </ div>\r\n                <form onSubmit={this.handleSubmitForm} className=\"header__form\">\r\n                    <div className=\"form__box\">\r\n                        <label>Stock symbol</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={this.state.stockSymbol}\r\n                            onChange={e => this.setState({ stockSymbol: e.target.value })}\r\n                            placeholder=\"try HD, MSFT, AAPL, ...\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"form__box\">\r\n                        <label>Start date</label>\r\n                        <input\r\n                            type=\"date\"\r\n                            value={this.state.startDate}\r\n                            onChange={e => this.setState({ startDate: e.target.value })}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form__box\">\r\n                        <button disabled={!this.state.startDate || !this.state.stockSymbol || this.props.loading} >Show me!</ button>\r\n                    </div>\r\n                </form>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Plot from 'react-plotly.js';\r\nimport {Config} from '../Config';\r\n\r\nexport interface IGraphProps {\r\n    stockValues?: number[];       \r\n    dateValues?: string[];\r\n    datasetName?: string;\r\n}\r\n\r\nconst Graph = (props: IGraphProps) => {\r\n    let datasetNameShortened = props.datasetName && props.datasetName.split(\"(\")[0].trim();\r\n    let graphWidth = document.documentElement.clientWidth - 20;  \r\n    let graphHeight = (document.documentElement.clientHeight / 4 * 3);\r\n    \r\n    return (\r\n        <Plot\r\n          data={[\r\n            {\r\n              x: props.dateValues,\r\n              y: props.stockValues,\r\n              type: \"scatter\",\r\n              mode: \"lines+markers\",\r\n              marker: {color: Config.componentsMainColor},\r\n            }\r\n          ]}\r\n          layout={{ \r\n            width: graphWidth,            \r\n            height: graphHeight,   \r\n            margin: { l: 60, r: 30, b: 80, t: 120, pad: 5 },\r\n            title: (datasetNameShortened || \"\"),\r\n            font: { family: `\"Helvetica Neue\",\"Helvetica Neue HQ\",Helvetica,Arial,sans-serif`, size: 15 }\r\n          }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Graph;\r\n","import React, { memo } from 'react';\r\nimport PortfolioAnalytics from 'portfolio-analytics';\r\nimport '../styles/KPIs.css';\r\n\r\nexport interface IKPIsProps {\r\n    stockValues?: number[]; \r\n}\r\n\r\nexport const KPIs = (props: IKPIsProps) => {\r\n    let maxDrawdown = 0; \r\n    let simpleReturn = 0; \r\n    if (props.stockValues && props.stockValues.length > 0) {\r\n        maxDrawdown = PortfolioAnalytics.maxDrawdown(props.stockValues);\r\n        simpleReturn = PortfolioAnalytics.cumulativeReturn(props.stockValues);\r\n    }\r\n\r\n    return (\r\n        <div className=\"kpis\">           \r\n            <div className=\"kpis__box\">\r\n                <span className=\"kpis__label\">{\"Maximum drawdown: \"}</span>\r\n                <span className=\"kpis__value\">{(maxDrawdown * 100).toFixed(2) + \"%\"}</span>       \r\n            </div>       \r\n            <div className=\"kpis__box\">\r\n                <span className=\"kpis__label\">{\"Simple return: \"}</span>\r\n                <span className=\"kpis__value\">{(simpleReturn * 100).toFixed(2) + \"%\"}</span>       \r\n            </div>  \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(KPIs);     // pure component, change reference to array, if rerender needed\r\n","import React, { Component } from 'react';\r\nimport {IQuandlSuccessResponse, IQuandlErrorResponse, IDataset} from '../types';\r\nimport {Config} from '../Config';\r\nimport {Utils} from '../Utils';\r\nimport Header from './Header';\r\nimport Graph from './Graph';\r\nimport KPIs from './KPIs';\r\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\r\nimport memoize from \"memoize-one\";\r\nimport 'normalize.css';\r\nimport 'react-notifications/lib/notifications.css';\r\nimport '../styles/App.css';\r\n\r\ninterface IAppState {\r\n  dataset?: IDataset;\r\n  loading?: boolean;\r\n}\r\n\r\nclass App extends Component<{}, IAppState> {\r\n  state: IAppState = {\r\n    loading: false\r\n  }\r\n\r\n  fetchApiData = (stockSymbol: string, startDate: string) => {\r\n    let today = new Date();\r\n    let todayDateString = Utils.getDateString(today);\r\n    let url = Config.getApiUrl(startDate, todayDateString, stockSymbol);\r\n\r\n    this.setState({loading: true});\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(this.saveApiData)\r\n      .catch(error => {\r\n          this.handleError(error.message);\r\n      });\r\n  }\r\n\r\n  saveApiData = (apiData: IQuandlSuccessResponse & IQuandlErrorResponse) => {\r\n    if (!apiData || !apiData.dataset || !apiData.dataset.column_names || !apiData.dataset.data) {\r\n        this.handleError(apiData && apiData.quandl_error && apiData.quandl_error.message || \"Invalid data received\");\r\n        return;\r\n    }\r\n    if (apiData.dataset.data.length == 0) {\r\n      this.handleError(\"No data received\");\r\n      return;\r\n    }\r\n    this.setState({dataset: apiData.dataset, loading: false});\r\n  }  \r\n\r\n  handleError = (error: string) => {\r\n    NotificationManager.error(error, 'Error loading data', 10000);\r\n    this.setState({dataset: undefined, loading: false}); \r\n  }\r\n\r\n  parseValuesFromApiData = memoize(\r\n    (dataset?: IDataset) => {                                                               \r\n      if (!dataset)\r\n        return {dateValues: [], adjCloseValues: []};\r\n\r\n      let dateIndex = dataset.column_names.indexOf(\"Date\");\r\n      let adjCloseIndex = dataset.column_names.indexOf(\"Adj_Close\");\r\n\r\n      // we expect data to arrive sorted from newest to oldest\r\n      let dateValues = dataset.data.map(arrayOfData => arrayOfData[dateIndex]).reverse();\r\n      let adjCloseValues = dataset.data.map(arrayOfData => arrayOfData[adjCloseIndex]).reverse();\r\n\r\n      return {dateValues, adjCloseValues};\r\n    }\r\n  );\r\n\r\n  updateWindowDimensions = () => {\r\n      this.forceUpdate();\r\n  }\r\n\r\n  componentDidMount() {\r\n      window.addEventListener(\"resize\", this.updateWindowDimensions);\r\n  }\r\n  componentWillUnmount() {\r\n      window.removeEventListener(\"resize\", this.updateWindowDimensions);\r\n  }\r\n\r\n  render() {   \r\n    let {dateValues, adjCloseValues} = this.parseValuesFromApiData(this.state.dataset); \r\n\r\n    return (\r\n      <div className=\"app\">\r\n        <Header onRequestData={this.fetchApiData} loading={this.state.loading}/>\r\n        <Graph stockValues={adjCloseValues} dateValues={dateValues} datasetName={this.state.dataset && this.state.dataset.name}/>\r\n        <KPIs stockValues={adjCloseValues} />        \r\n        <footer>\r\n          Copyright © 2019 Miroslav Beno\r\n        </footer>\r\n        <NotificationContainer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'react-app-polyfill/ie11';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.d9f01863.svg\";","module.exports = __webpack_public_path__ + \"static/media/logoText.fd514455.svg\";"],"sourceRoot":""}